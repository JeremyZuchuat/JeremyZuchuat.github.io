ggplot(data=data_subset_2, aes(x = Annual.CO2.growth...., y = log(Cumulative.CO2.emissions))) +
geom_point(aes(fill=CH, size=CH),
colour="black",pch=21) +
scale_fill_manual(values=c(rgb(0.8,0.8,0.8), rgb(0.9, 0.3, 0.3))) +
scale_size_manual(values=c(2,5)) +
geom_label_repel(data=subset(data_subset_2, Entity == "Switzerland"), aes(label = Entity),
nudge_y       = 1.5, # 10-log(subset(data_subset_2, Entity == "Switzerland")$Cumulative.CO2.emissions),
nudge_x       = -40, # 10+subset(data_subset_2, Entity == "Switzerland")$Annual.CO2.growth....,
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
segment.size = 0.3)
library(ggplot2)
library(ggrepel)
graphics.off()
data <- read.csv("https://raw.githubusercontent.com/owid/owid-datasets/master/datasets/CO2%20emissions%20(Aggregate%20dataset%20(2020))/CO2%20emissions%20(Aggregate%20dataset%20(2020)).csv")
data_subset_2 <- subset(data, Year == 2015 )
data_subset_2$CH <- as.factor(data_subset_2$Entity == "Switzerland")
ggplot(data=data_subset_2, aes(x = Annual.CO2.growth...., y = log(Cumulative.CO2.emissions))) +
geom_point(aes(fill=CH, size=CH),
colour="black",pch=21) +
scale_fill_manual(values=c(rgb(0.8,0.8,0.8), rgb(0.9, 0.3, 0.3))) +
scale_size_manual(values=c(2,5)) +
geom_label_repel(data=subset(data_subset_2, Entity == "Switzerland"), aes(label = Entity),
nudge_y       = 1.5, # 10-log(subset(data_subset_2, Entity == "Switzerland")$Cumulative.CO2.emissions),
nudge_x       = -40, # 10+subset(data_subset_2, Entity == "Switzerland")$Annual.CO2.growth....,
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50',
segment.size = 0.3) +
ylab("CO2 emission (per capita) ") +
xlab("Year") +
labs(color="Country : ") +
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.background = element_rect(fill = NA),
# Axes
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black", size=0.1),
axis.line = element_line(colour = "black", size=0.1),
# Y-AXIS
panel.grid.major.y = element_line(colour = rgb(0.9,0.9,0.9)),
# X-AXIS
# LEGEND
legend.position = "none")
?predict
r <- raster(nrow=10, ncol=10)
r
library(rastter)
library(raster)
r <- raster(nrow=10, ncol=10)
r
values(r) <- 1:ncell(r)
plot(r)
s <- select(r) # now click on the map twice
info_touring
info_touring_ind <- info_touring[which(info_touring$File == i),]
info_touring <- read_excel("Infos/info_touring.xlsx", sheet = "info_tour")
setwd("/Users/j.zuchuat/Google Drive/Sport/CarnetSorties")
# Packages
library(readxl)
library(rmarkdown)
library(raster)
library(rasterVis)
library(rgdal)
library(ggplot2)
library(rasterpdf)
library(grImport)
library(plotKML)
library(geosphere)
# Info on tours
info_touring <- read_excel("Infos/info_touring.xlsx", sheet = "info_tour")
info_touring
info_touring_ind$Risque
info_touring <- read_excel("Infos/info_touring.xlsx", sheet = "info_tour")
info_touring$Risque
info_touring <- read_excel("Infos/info_touring.xlsx", sheet = "info_tour")
info_touring
raster(https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk25.noscale/swiss-map-raster25_2016_1285/swiss-map-raster25_2016_1285_krel_1.25_2056.tif)
raster("https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk25.noscale/swiss-map-raster25_2016_1285/swiss-map-raster25_2016_1285_krel_1.25_2056.tif")
# Files name
file_pdf_tour <- paste(path_graphs,i,"_tour.pdf", sep = "")
file_pdf_elevation <- paste(path_graphs,i,"_elevation.pdf", sep = "")
file_gpx <- paste(path_GPX,i,".gpx", sep = "")
#---
#- A. Import GPX file
#---
setwd(path_GPX)
data <- as.data.frame(readGPX(file_gpx)$tracks[[1]])
data <- data[,1:3]
names(data) <- c("longitude", "latitude", "elevation")
# Total elevation
elevation_total <- as.numeric(data$elevation) - c(as.numeric(data$elevation[2:length(data$elevation)]),NA)
elevation_total <- round(sum(elevation_total[which(elevation_total > 0)]))
# Distance
cum_distance <- 0
cum_distance_gpx <- c(0)
for (m in 2:dim(data)[1]) {
cum_distance <- cum_distance + distm(c(data$longitude[m-1],data$latitude[m-1]),c(data$longitude[m],data$latitude[m]))
cum_distance_gpx <- c(cum_distance_gpx,cum_distance)
}
data$distance <- cum_distance_gpx/1000
# Smoothed elevation
data$elevation_smoothed <- lowess(data$distance, data$elevation, f=1/1000)$y
# Converting latitude/longitude
# X
data$degree_X <- floor(data$longitude)
data$minutes_X <- floor((data$longitude - data$degree_X)*60)
data$seconds_X <- ((data$longitude - data$degree_X)*60-data$minutes_X)*60
# Y
data$degree_Y <- floor(data$latitude)
data$minutes_Y <- floor((data$latitude - data$degree_Y)*60)
data$seconds_Y <- ((data$latitude - data$degree_Y)*60-data$minutes_Y)*60
head(data)
# Everything in seconds
data$tot_seconds_X <- (data$degree_X*60*60 + data$minutes_X*60 + data$seconds_X)
data$tot_seconds_Y <- (data$degree_Y*60*60 + data$minutes_Y*60 + data$seconds_Y)
data$tot_seconds_Y <- (data$tot_seconds_Y - 169028.66)/10000
data$tot_seconds_X <- (data$tot_seconds_X - 26782.5)/10000
# Apply formula : WGS84 -> MN95
data$E <- 2600072.37 +
211455.93*data$tot_seconds_X -
10938.51*data$tot_seconds_X*data$tot_seconds_Y -
0.36*data$tot_seconds_X*data$tot_seconds_Y^2 -
4.54*data$tot_seconds_X^3
data$N <- 1200147.07 +
308807.95*data$tot_seconds_Y +
3745.25*data$tot_seconds_X^2 +
76.63*data$tot_seconds_Y^2 -
194.56*data$tot_seconds_X^2*data$tot_seconds_Y +
119.79*data$tot_seconds_Y^3
# Highest point
data$highest_point <- data$elevation == max(data$elevation)
# Lmit points
min_E <- min(data$E)
max_E <- max(data$E)
min_N <- min(data$N)
max_N <- max(data$N)
# Range covered by GPX
range_E_GPX <- max(data$E)-min(data$E)
range_N_GPX <- max(data$N)-min(data$N)
#---------------------------------------------------------------------------------------------------------------
#---
#-- B. Create raster (1:25000)
#---
setwd(path_raster_source)
#---
#- B1. Check existence of subraster/cropped raster
#---
if (file.exists(paste(path_raster_cropped,i,".tif", sep="")) == TRUE)  {
message("   Cropped raster file already exists.")
} else  {
message("   Cropped raster file does not exist ; generating.")
#---
#- B2. If doesn't exit :
#---
# 1. Getting all individual rasters over which the tour spans (possibly already merged ones)
list_rasters_1_25_compressed <- list.files(path = paste(path_raster_source,sep=""))
list_rasters_1_25_compressed <- list_rasters_1_25_compressed[!file.info(list_rasters_1_25_compressed)$isdir]
list_keep_raster <- vector(mode = "list", length = 0)
j <- 1
for (k in list_rasters_1_25_compressed) {
#raster_TOPO <- raster(paste(path_raster_source, "/Compressed/",k, sep=""))
raster_TOPO <- raster(paste(path_raster_source, "",k, sep=""))
e_lim <- extent(raster_TOPO)
# Check if any point in the interval
if (max(data$E >= e_lim[1] & data$E <=  e_lim[2]) == 1 & max(data$N >=  e_lim[3] & data$N <=  e_lim[4]) == 1) {
list_keep_raster[j] <- raster_TOPO
j <- j+1
}
}
# 2. Merging raster
raster_TOPO <- list_keep_raster[[1]]
# Case where the tour spans over several tifs -> merge
if (length(list_keep_raster) > 1) {
message("   Several rasters to be merged.")
for (l in 2:length(list_keep_raster)) {
raster_TOPO <- merge(list_keep_raster[[l]],raster_TOPO)
}
}
rm(list_keep_raster)
#---
#- B3. First croppping raster
#---
extend_raster <- 0.15 # Margin around GPX
# Get initial sub-raster
e_lim <- extent(min_E, max_E, min_N, max_N)
sub_raster <- crop(raster_TOPO, e_lim)
if (dim(sub_raster)[1] >= dim(sub_raster)[2]) {
# E must be extended
# Number of cells to be addes
ratio_adjust <- (dim(sub_raster)[1]-dim(sub_raster)[2])/2/dim(sub_raster)[2]
max_E <- max_E + ratio_adjust*range_E_GPX
min_E <- min_E - ratio_adjust*range_E_GPX
} else {
# N must be extended
# Number of cells to be addes
ratio_adjust <- (dim(sub_raster)[2]-dim(sub_raster)[1])/2/dim(sub_raster)[1]
max_N <- max_N + ratio_adjust*range_N_GPX
min_N <- min_N - ratio_adjust*range_N_GPX
}
#
# New sub-raster
range_E <- max_E-min_E
range_N <- max_N-min_N
min_E <- min_E - extend_raster*range_E
max_E <- max_E + extend_raster*range_E
min_N <- min_N - extend_raster*range_N
max_N <- max_N + extend_raster*range_N
e_lim_sub <- extent(min_E, max_E, min_N, max_N)
# Sub raster with new limits
sub_raster <- crop(raster_TOPO, e_lim_sub)
#---
#- B4. Possibly merge raster such that new limits fall into raster
#---
if ((extent(raster_TOPO)[1] <= e_lim_sub[1]
& extent(raster_TOPO)[2] >= e_lim_sub[2]
& extent(raster_TOPO)[3] <= e_lim_sub[3]
& extent(raster_TOPO)[4] >= e_lim_sub[4]) == FALSE) {
# 1. Getting raster that cover the tour (new limits)
message("   New cropping + merging necassary to account for raster margins.")
list_keep_raster <- vector(mode = "list", length = 0)
# Loop through rasters
j <- 1
for (k in list_rasters_1_25_compressed) {
#for (k in c("VS_1_25_1307.tif", "VS_1_25_1308.tif")) {
raster_TOPO <- raster(paste(path_raster_source, "/Compressed/",k, sep=""))
e_lim <- extent(raster_TOPO)
# Check if any point of the limits in raster
if ((e_lim_sub[1] >= e_lim[1] & e_lim_sub[1] <= e_lim[2] & e_lim_sub[3] >= e_lim[3] & e_lim_sub[3] <= e_lim[4])
| (e_lim_sub[2] >= e_lim[1] & e_lim_sub[2] <= e_lim[2] & e_lim_sub[3] >= e_lim[3] & e_lim_sub[3] <= e_lim[4])
| (e_lim_sub[1] >= e_lim[1] & e_lim_sub[1] <= e_lim[2] & e_lim_sub[4] >= e_lim[3] & e_lim_sub[4] <= e_lim[4])
| (e_lim_sub[2] >= e_lim[1] & e_lim_sub[2] <= e_lim[2] & e_lim_sub[4] >= e_lim[3] & e_lim_sub[4] <= e_lim[4])) {
list_keep_raster[j] <- raster_TOPO
j <- j+1
}
}
# 2. Merging raster
raster_TOPO <- list_keep_raster[[1]]
# Case where the tour spans over several tifs -> merge
if (length(list_keep_raster) > 1) {
for (l in 2:length(list_keep_raster)) {
raster_TOPO <- merge(list_keep_raster[[l]],raster_TOPO)
}
}
# 3. Final subraster
sub_raster <- crop(raster_TOPO, e_lim_sub)
}
#---
#- B5. Crop final Sub-raster
#---
# Write sub-raster
writeRaster(sub_raster,
file= paste(path_raster_cropped,i, sep=""),
format = "GTiff",
overwrite = TRUE)
}
# Read sub-raster
sub_raster <- raster(paste(path_raster_cropped,i,".tif", sep=""))
#---------------------------------------------------------------------------------------------------------------
#---
#- C. Draw graphs
#---
setwd(path_graphs)
getwd()
max_pix_raster <- dim(sub_raster)[1]*dim(sub_raster)[2]
aspect_ratio <- dim(sub_raster)[1]/dim(sub_raster)[2]
# Rectangle
rectangle <- as.data.frame(cbind(c(extent(sub_raster)[1],extent(sub_raster)[2],extent(sub_raster)[2],extent(sub_raster)[1],extent(sub_raster)[1]),
c(extent(sub_raster)[3],extent(sub_raster)[3],extent(sub_raster)[4],extent(sub_raster)[4],extent(sub_raster)[3])))
names(rectangle) <- c("E", "N")
#---
#- C1. Topos
#---
pdf(file = file_pdf_tour)
plot(rectangle$E,rectangle$N, lwd=7, col="black", type = "line",
xlab = "", ylab = "",
axes=FALSE, box = FALSE, legend=FALSE,asp=aspect_ratio)
plot(sub_raster, col = pal(10), axes=FALSE, box = FALSE,
legend=FALSE, maxpixels = max_pix_raster, add=TRUE)
lines(data$E,data$N, col=rgb(0.8,0.2,0.2),lwd=2.5)
points(data$E[which(data$elevation==max(data$elevation, na.rm = TRUE))],
data$N[which(data$elevation==max(data$elevation, na.rm = TRUE))],
col="black",lwd=2,pch=21,cex = 2,bg=rgb(0.8,0.2,0.2))
dev.off()
#---
#- C2. Elevation
#---
max_y <- as.numeric(max(data$elevation_smoothed, na.rm = TRUE))
min_y <- as.numeric(min(data$elevation_smoothed, na.rm = TRUE))
max_x <- max(data$distance, na.rm = TRUE)
min_x <- min(data$distance, na.rm = TRUE)
# Polygon
polygon <- as.data.frame(rbind((c(min_x,min_y)), cbind(data$distance,data$elevation_smoothed), (c(max_x,min_y))))
names(polygon) <- c("distance","elevation_smoothed")
pdf(file = file_pdf_elevation, width = 15, height = 10)
plot(polygon$distance,polygon$elevation_smoothed, type = "l", xlab = "Distance [km]", ylab = "Altitude")
polygon(polygon$distance, polygon$elevation,col=gray(0.90), border=NA)
lines(polygon$distance,polygon$elevation_smoothed, type = "l")
abline(h=max_y, lty = "dashed")
abline(h=min_y, lty = "dashed")
dev.off()
counter <- counter+1
# Files name
file_pdf_tour <- paste(path_graphs,i,"_tour.pdf", sep = "")
file_pdf_elevation <- paste(path_graphs,i,"_elevation.pdf", sep = "")
message(paste("   Number of rasters :", 1))
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
template
template
list_GPX[2]
list_GPX
match(output_file,list_GPX)
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2])
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2])
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2],param= ls(list_GPX[2]))
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2],params= ls(list_GPX[2]))
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2],params= list_GPX[2])
rm(list=ls())
# Working directory
path_root <- "/Users/j.zuchuat/Documents/GitHub/JeremyZuchuat.github.io/map/"
path_GPX <- paste(path_root,"/gpx/simplified/",sep="")
# Main path
setwd(path_root)
# Info on tours
info_touring <- read.csv("information/info_touring.csv",sep=",")
# List GPX files
list_GPX <- list.files(path = path_GPX)
list_GPX <- list_GPX[substr(list_GPX,nchar(list_GPX)-3,nchar(list_GPX)) == ".gpx"]
list_GPX <- substr(list_GPX,1,nchar(list_GPX)-4)
# Printing only two decimals
print_decimal <- function(x, d=2) sprintf(paste0("%1.",d,"f"), x)
# Generic HTML
render_report <- function(tour) {
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
out_file <- tour # sprintf("report %s vs. %s", var2, var1)
parameters <- list(variable1 = tour)
rmarkdown::render(template,
output_file = out_file,
params = parameters)
invisible(TRUE)
}
# Generate all HTML
#render_report(list_GPX[2])
paste(path_root,"script/ski_tour_html.Rmd", sep="")
template <- paste(path_root,"script/ski_tour_html.Rmd", sep="")
rmarkdown::render(template,output_file = list_GPX[2],params= ls(list_GPX[2]))
